// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

#nullable disable

namespace Persistance.MigrationScripts
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241210183713_DBSchemaWithRelations")]
    partial class DBSchemaWithRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NomineeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrimaryUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondaryUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NomineeId");

                    b.HasIndex("PrimaryUserId")
                        .IsUnique();

                    b.HasIndex("SecondaryUserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Models.Adhar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Adhars");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdharId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdharId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.HasOne("Models.User", "Nominee")
                        .WithMany("Nominees")
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "PrimaryAccountHolder")
                        .WithOne("PrimaryAccount")
                        .HasForeignKey("Models.Account", "PrimaryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "SecondaryAccountHolder")
                        .WithMany("SecondaryAccounts")
                        .HasForeignKey("SecondaryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nominee");

                    b.Navigation("PrimaryAccountHolder");

                    b.Navigation("SecondaryAccountHolder");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Adhar", "AdharNumber")
                        .WithOne("AdharCardHolder")
                        .HasForeignKey("Models.User", "AdharId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdharNumber");
                });

            modelBuilder.Entity("Models.Adhar", b =>
                {
                    b.Navigation("AdharCardHolder");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Nominees");

                    b.Navigation("PrimaryAccount");

                    b.Navigation("SecondaryAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
